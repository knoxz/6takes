const NAMES=["Joey","Evan","Dwayne","Quinton","Hank","Kim","Peter","Jeremy","Jimmy","Romeo","Chris","Olivia","Emma","Charlotte","Amelia","Ava","Sophia","Isabella","Mia","Alice","Bob","Antigonus","Leonidas","Alexandros","Phaedra","Calliope","Achilleas","Hercules","Abderus","Yiorgos","Yiannis","Constantine","Dimitris","Nicholas","Panagiotis","Athanasios","Maria","Eleni","Katerina","Vasiliki","Angeliki","Konstandina","Miya","Indra","Kamala","Ren","Zoltan","Aki","Amida","Ambrocio","Ang","Aroon","Chongan","Chung","Dara","Abiona","Adah","Bongani","Abdullah","Amari","Siyabonga","Mandla","Kamogelo","Onkarabile","Lubanzi","Tau","Tshepiso","Houshang","Hashem","Pedram","Mehdi","Azar","Farhad","Arash","Vahid","Donya","Roya","Jaleh","Tara","Soraya","Mehrzad","Ibrahim"],WaitBox={show:()=>{document.body.insertAdjacentHTML("beforeend",'<div class="waitbox"></div>')},hide:()=>{const e=document.querySelector(".waitbox");null!=e&&e.remove()}},NUM=0,CATTLE=1;class Card{constructor(e,a,s){this.idx=e,this.num=a,this.cattle=s}toDiv(e){var a=Array.from({length:this.cattle},()=>'<img src="/static/skull-solid.svg">').join("");return`
            <div class="card" data-idx="${this.idx}">
                <div class="skulls top">${a}</div>
                <div class="num">${this.num}</div>
                ${null!=e?`<div class="player-name">${e}</div>`:""}
            </div>`}toString(){return"Card: "+this.num}}class Deck{update(e){this.cards=e}display(a){const s=document.querySelector(".player-deck");s.innerHTML="",this.cards.forEach(e=>{s.insertAdjacentHTML("beforeend",e.toDiv())}),s.querySelectorAll(".card").forEach(e=>{e.addEventListener("click",e=>{WaitBox.show();e=e.target.dataset.idx;a(e)})})}}class Table{constructor(e){this.rows=[],this.nameFn=e}update(e,a,s){this.prev=1===e?a:this.rows,this.rows=this.prev,this.moves=s}display(){this.renderPrevious(),this.addMove()}renderPrevious(){const s=document.querySelector(".table");s.innerHTML="",this.prev.forEach((e,a)=>{a=`<div class="row row${a}">${e.map(e=>e.toDiv()).join("")}</div>`;s.insertAdjacentHTML("beforeend",a)})}addMove(){var e,a,s,t;0===this.moves.length?WaitBox.hide():([e,a,s,t]=this.moves.shift(),this.addCard(e,a,s,t),setTimeout(()=>this.addMove(),500))}addCard(e,a,s,t){a=a;const i=new Card(0,a[NUM],a[CATTLE]);a=this.nameFn("player_"+e),t&&(this.rows[s]=[]),this.rows[s].push(i),e=i.toDiv(a);const n=document.querySelector(".table .row"+s);t&&(n.innerHTML=""),n.insertAdjacentHTML("beforeend",e)}}class Game{constructor(){this.table=new Table(e=>this.getName(e)),this.deck=new Deck}start(){this.round=0,this.randomizeNames(),this.postMove(-1)}randomizeNames(){var a=NAMES;for(let e=a.length-1;0<e;e--){var s=Math.floor(Math.random()*(e+1));[a[e],a[s]]=[a[s],a[e]]}this.names=NAMES.slice(10)}getName(e){e=e.match(/\d+/)[0];return 1<e?this.names[e]:0==e?"AI":1==e?"YOU":"ERROR"}display(e){const a=(e,a)=>new Card(a,e[NUM],e[CATTLE]);const s=e=>0<e.num;var t=e.piles.map(e=>Array.from(e,a).filter(s)),i=e.played_round,t=(this.table.update(this.round,t,i),Array.from(e.hand_cards,a).filter(s));this.deck.update(t);const n=Object.entries(e.player_dict).map(e=>{return{name:this.getName(e[0]),sum:e[1].penalty_sum}});this.displayScores(n),this.table.display(),this.deck.display(e=>this.postMove(e)),0==t.length&&(e.done=!0),e.done&&setTimeout(()=>this.showEndScreen(n),5e3)}showEndScreen(e){WaitBox.show();e.sort((e,a)=>e.sum<a.sum);e=e.map(e=>`
                <div class="score-row">
                    <div class="player-name">${e.name}</div>
                    <div class="player-sum">${e.sum}</div>
                </div>`).join("");document.body.insertAdjacentHTML("beforeend",`
            <div class="end-screen">
                ${e}
                <br /><div class="button play-again">Play again</div>
            </div>`);const a=document.querySelector(".play-again");a.addEventListener("click",()=>{const e=document.querySelector(".end-screen");null!=e&&e.remove(),this.start()})}displayScores(e){const a=document.querySelector(".points");a.innerHTML="",e.forEach(e=>{e.sum*=-1;e=`
                <div class="entry ${e.name}">
                    <div>${e.name}</div>
                    <div class="sum">${e.sum}</div>
                </div>`;a.insertAdjacentHTML("beforeend",e)})}postMove(e){jQuery.ajax("make_action",{data:JSON.stringify({action:e}),contentType:"application/json",type:"POST"}).done(e=>{this.round+=1,this.display(e)})}}const G=new Game;window.addEventListener("DOMContentLoaded",()=>G.start());