const NAMES=["Joey","Evan","Dwayne","Quinton","Hank","Kim","Peter","Jeremy","Jimmy","Romeo","Chris","Olivia","Emma","Charlotte","Amelia","Ava","Sophia","Isabella","Mia","Alice","Bob","Antigonus","Leonidas","Alexandros","Phaedra","Calliope","Achilleas","Hercules","Abderus","Yiorgos","Yiannis","Constantine","Dimitris","Nicholas","Panagiotis","Athanasios","Maria","Eleni","Katerina","Vasiliki","Angeliki","Konstandina","Miya","Indra","Kamala","Ren","Zoltan","Aki","Amida","Ambrocio","Ang","Aroon","Chongan","Chung","Dara","Abiona","Adah","Bongani","Abdullah","Amari","Siyabonga","Mandla","Kamogelo","Onkarabile","Lubanzi","Tau","Tshepiso","Houshang","Hashem","Pedram","Mehdi","Azar","Farhad","Arash","Vahid","Donya","Roya","Jaleh","Tara","Soraya","Mehrzad","Ibrahim"],WaitBox={show:()=>{document.body.insertAdjacentHTML("beforeend",'<div class="waitbox"></div>')},hide:()=>{const a=document.querySelector(".waitbox");null!=a&&a.remove()}};class Card{constructor(a,e,i){this.idx=a,this.num=e,this.cattle=i}toDiv(){var a=Array.from({length:this.cattle},()=>'<img src="/static/skull-solid.svg">').join("");return`
            <div class="card" data-idx="${this.idx}">
                <div class="skulls top">${a}</div>
                <div class="num">${this.num}</div>
            </div>`}}class Deck{update(a){this.cards=a}display(e){const i=document.querySelector(".player-deck");i.innerHTML="",this.cards.forEach(a=>{i.insertAdjacentHTML("beforeend",a.toDiv())}),i.querySelectorAll(".card").forEach(a=>{a.addEventListener("click",a=>{WaitBox.show();a=a.target.dataset.idx;e(a)})})}}class Table{constructor(){this.rows=[]}update(a){this.rows=a}display(){const e=document.querySelector(".table");e.innerHTML="",this.rows.forEach(a=>{a=`<div class="row">${a.map(a=>a.toDiv()).join("")}</div>`;e.insertAdjacentHTML("beforeend",a)})}}const NUM=0,CATTLE=1;class Game{constructor(){this.table=new Table,this.deck=new Deck}start(){this.randomizeNames(),this.postMove(-1)}randomizeNames(){var e=NAMES;for(let a=e.length-1;0<a;a--){var i=Math.floor(Math.random()*(a+1));[e[a],e[i]]=[e[i],e[a]]}this.names=NAMES.slice(10)}display(a){const e=(a,e)=>new Card(e,a[NUM],a[CATTLE]),i=a=>0<a.num;var s=a.piles.map(a=>Array.from(a,e).filter(i)),s=(this.table.update(s),Array.from(a.hand_cards,e).filter(i));this.deck.update(s);const t=a=>{a=a[0].match(/\d+/)[0];return 1<a?this.names[a]:0==a?"AI":1==a?"YOU":"ERROR"};var n=Object.entries(a.player_dict).map(a=>{return{name:t(a),sum:a[1].penalty_sum}});this.displayScores(n),this.table.display(),this.deck.display(a=>this.postMove(a)),0==s.length&&(a.done=!0),a.done&&this.showEndScreen(n)}showEndScreen(a){WaitBox.show();a.sort((a,e)=>a.sum<e.sum);a=a.map(a=>`
                <div class="score-row">
                    <div class="player-name">${a.name}</div>
                    <div class="player-sum">${a.sum}</div>
                </div>`).join("");document.body.insertAdjacentHTML("beforeend",`
            <div class="end-screen">
                ${a}
                <br /><div class="button play-again">Play again</div>
            </div>`);const e=document.querySelector(".play-again");e.addEventListener("click",()=>{const a=document.querySelector(".end-screen");null!=a&&a.remove(),this.start()})}displayScores(a){const e=document.querySelector(".points");e.innerHTML="",a.forEach(a=>{a.sum*=-1;a=`
                <div class="entry ${a.name}">
                    <div>${a.name}</div>
                    <div class="sum">${a.sum}</div>
                </div>`;e.insertAdjacentHTML("beforeend",a)})}postMove(a){jQuery.ajax("make_action",{data:JSON.stringify({action:a}),contentType:"application/json",type:"POST"}).done(a=>{this.display(a),WaitBox.hide()})}}const G=new Game;window.addEventListener("DOMContentLoaded",()=>G.start());