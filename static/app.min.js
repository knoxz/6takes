const WaitBox={show:()=>{},hide:()=>{}};class Card{constructor(t,s,e){this.idx=t,this.num=s,this.cattle=e}toDiv(){var t=Array.from({length:this.cattle},()=>'<img src="/static/skull-solid.svg">').join("");return`<div class="card" data-idx="${this.idx}"><div class="skulls top">${t}</div><div class="num">${this.num}</div><div class="skulls bottom">${t}</div></div>`}}class Deck{update(t){this.cards=t}display(s){const e=document.querySelector(".player-deck");e.innerHTML="",this.cards.forEach(t=>{e.insertAdjacentHTML("beforeend",t.toDiv())}),e.querySelectorAll(".card").forEach(t=>{t.addEventListener("click",t=>{WaitBox.show();t=t.target.dataset.idx;s(t)})})}}class Table{constructor(){this.rows=[]}update(t){this.rows=t}display(){const s=document.querySelector(".table");this.rows.forEach(t=>{t=`<div class="row">${t.map(t=>t.toDiv()).join("")}</div>`;s.insertAdjacentHTML("beforeend",t)})}}const NUM=0,CATTLE=1;class Game{constructor(){this.table=new Table,this.deck=new Deck}start(){this.postMove(-1)}display(t){const s=(t,s)=>new Card(s,t[NUM],t[CATTLE]),e=t=>0<t.num;var a=t.piles.map(t=>Array.from(t,s).filter(e)),a=(this.table.update(a),Array.from(t.hand_cards,s).filter(e)),a=(this.deck.update(a),Object.entries(t.player_dict).map(t=>{return{name:t[0],sum:t[1].penalty_sum}}));this.displayPoints(a),this.table.display(),this.deck.display(t=>this.postMove(t))}displayPoints(t){const s=document.querySelector(".points");s.innerHTML="",t.forEach(t=>{t=`<div class="entry"><div>${t.name}</div><div class="sum">${t.sum}</div></div>`;s.insertAdjacentHTML("beforeend",t)})}postMove(t){jQuery.ajax("make_action",{data:JSON.stringify({action:t}),contentType:"application/json",type:"POST"}).done(t=>{this.display(t)})}}const G=new Game;window.addEventListener("DOMContentLoaded",()=>G.start());