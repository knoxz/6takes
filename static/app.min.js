const WaitBox={show:()=>{},hide:()=>{}};class Card{constructor(s,t,e){this.idx=s,this.num=t,this.cattle=e}toDiv(){var s=Array.from({length:this.cattle},()=>'<img src="assets/skull-solid.svg">').join("");return`<div class="card" data-idx="${this.idx}"><div class="skulls top">${s}</div><div class="num">${this.num}</div><div class="skulls bottom">${s}</div></div>`}}class Deck{update(s){this.cards=s}display(t){const e=document.querySelector(".player-deck");e.innerHTML="",this.cards.forEach(s=>{e.insertAdjacentHTML("beforeend",s.toDiv())}),e.querySelectorAll(".card").forEach(s=>{s.addEventListener("click",s=>{WaitBox.show();s=s.target.dataset.idx;jQuery.post("/make_action",{action:s},s=>{t(s)})})})}}class Table{constructor(){this.rows=[]}update(s){this.rows=s}display(){const t=document.querySelector(".table");this.rows.forEach(s=>{s=`<div class="row">${s.map(s=>s.toDiv()).join("")}</div>`;t.insertAdjacentHTML("beforeend",s)})}}const NUM=0,CATTLE=1;class Game{constructor(){this.table=new Table,this.deck=new Deck}start(){this.nextRound()}nextRound(s){jQuery.get("assets/test.state.json",s=>{this.display(s)})}display(s){const t=(s,t)=>new Card(t,s[NUM],s[CATTLE]),e=s=>0<s.num;var i=s.piles.map(s=>Array.from(s,t).filter(e)),i=(this.table.update(i),Array.from(s.hand_cards,t).filter(e)),i=(this.deck.update(i),Object.entries(s.player_dict).map(s=>{return{name:s[0],sum:s[1].penalty_sum}}));console.log(i),this.displayPoints(i),this.table.display(),this.deck.display(s=>this.nextRound(s))}displayPoints(s){const t=document.querySelector(".points");t.innerHTML="",s.forEach(s=>{s=`<div class="entry"><div>${s.name}</div><div class="sum">${s.sum}</div></div>`;t.insertAdjacentHTML("beforeend",s)})}}